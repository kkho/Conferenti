name: Conferenti Web - Test and Deploy Pipeline

on:
  pull_request:
    types: [ready_for_review, opened, reopened, synchronize]
    branches: [main]
    paths:
      - "conferenti-web/**"
      - ".github/workflows/frontend-test-build-deploy.yaml"
  push:
    branches: [main]
    paths:
      - "conferenti-web/**"
      - ".github/workflows/frontend-test-build-deploy.yaml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  unit-tests:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      changed: ${{ steps.set-matrix.outputs.changed }}
    strategy:
      matrix:
        node-version: [20.x]
    defaults:
      run:
        working-directory: ./conferenti-web
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: conferenti-web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - id: set-matrix
        run: |
          echo "matrix={\"appname\":[\"conferenti-web\"]}" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT

      - name: Run linter
        run: npm run lint

      - name: Type check
        run: npm run type-check
        continue-on-error: true

      - name: Run tests
        run: npm run test:ci
        env:
          CI: true
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            conferenti-web/test-results/
            conferenti-web/coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          file: ./conferenti-web/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        node-version: [20.x]
    defaults:
      run:
        working-directory: ./conferenti-web

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: conferenti-web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          CI: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: conferenti-web/playwright-report/
          retention-days: 30
  build-dev:
    name: Build image for conferenti-web-dev
    needs: [unit-tests, e2e-tests]
    if: ${{ needs.unit-tests.outputs.changed != '[]' }}
    strategy:
      matrix: ${{fromJSON(needs.unit-tests.outputs.matrix)}}
    uses: kkho/workflows/.github/workflows/build-push.yaml@main
    with:
      app_name: ${{ matrix.appname }}
      system_name: conferenti
      environment: development
      dockerfile: ./conferenti-web/Dockerfile
      tags: |
        $CONTAINER_REGISTRY/conferenti/conferenti-web-dev:${{ github.run_number }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # deploy:
  #   needs: [build-dev]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Azure Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: conferentiregistry.azurecr.io
  #         username: ${{ secrets.ACR_USERNAME }}
  #         password: ${{ secrets.ACR_PASSWORD }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./conferenti-web
  #         push: true
  #         tags: |
  #           ghcr.io/conferenti/conferenti-web-dev:${{ github.run_number }}
  #           ghcr.io/conferenti/conferenti-web-dev:latest
  #         cache-from: type=registry,ref=ghcr.io/conferenti/conferenti-web-dev:buildcache
  #         cache-to: type=registry,ref=ghcr.io/conferenti/conferenti-web-dev:buildcache,mode=max

  #     - name: Deploy to Kubernetes (Dev)
  #       run: |
  #         echo "Deploying to Kubernetes..."
  #         # Install kubectl if needed
  #         # Set up kubeconfig
  #         # Apply deployment
  #         envsubst < conferenti-web/CI/dev-deploy/deployment-dev.yaml | kubectl apply -f -
  #         envsubst < conferenti-web/CI/dev-deploy/service-dev.yaml | kubectl apply -f -
  #         envsubst < conferenti-web/CI/dev-deploy/ingress-dev.yaml | kubectl apply -f -
  #       env:
  #         GITHUB_RUN_NUMBER: ${{ github.run_number }}
  #         KUBECONFIG: ${{ secrets.KUBECONFIG }}

  #     - name: Deployment summary
  #       run: |
  #         echo "### ðŸŽ‰ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "**Image:** \`conferentiregistry.azurecr.io/conferenti/conferenti-web-dev:${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
  #         echo "**Environment:** Dev" >> $GITHUB_STEP_SUMMARY
  #         echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
