name: Conferenti Web - Test and Deploy Pipeline

on:
  push:
    branches: [main]
    paths:
      - "conferenti-web/**"
  pull_request:
    types: [ready_for_review, opened, reopened, synchronize]
    branches: [main]
    paths:
      - "conferenti-web/**"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  # ============================================================================
  # JOB 1: Unit & Integration Tests
  # ============================================================================
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    
    defaults:
      run:
        working-directory: ./conferenti-web
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: conferenti-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check
      
      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./conferenti-web/coverage/lcov.info
          flags: unittests
          name: unit-tests
          token: ${{ secrets.CODECOV_TOKEN }}

  # ============================================================================
  # JOB 2: End-to-End Tests
  # ============================================================================
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    defaults:
      run:
        working-directory: ./conferenti-web
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: conferenti-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      
      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          CI: true
      
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: conferenti-web/playwright-report/
          retention-days: 30

  # ============================================================================
  # JOB 3: Build & Deploy (Only runs if BOTH tests pass!)
  # ============================================================================
  deploy:
    # ‚≠ê This is the key line - deploy ONLY if both tests succeed
    needs: [unit-tests, e2e-tests]
    
    # Only deploy on main branch, not on PRs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log deployment trigger
        run: |
          echo "üöÄ Deploying to Dev and Test environments"
          echo "‚úÖ Unit tests passed"
          echo "‚úÖ E2E tests passed"
          echo "üì¶ Building Docker image..."
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: conferentiregistry.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./conferenti-web
          push: true
          tags: |
            conferentiregistry.azurecr.io/conferenti/conferenti-web-dev:${{ github.run_number }}
            conferentiregistry.azurecr.io/conferenti/conferenti-web-dev:latest
          cache-from: type=registry,ref=conferentiregistry.azurecr.io/conferenti/conferenti-web-dev:buildcache
          cache-to: type=registry,ref=conferentiregistry.azurecr.io/conferenti/conferenti-web-dev:buildcache,mode=max
      
      - name: Deploy to Kubernetes (Dev)
        run: |
          echo "Deploying to Kubernetes..."
          # Install kubectl if needed
          # Set up kubeconfig
          # Apply deployment
          envsubst < conferenti-web/CI/dev-deploy/deployment-dev.yaml | kubectl apply -f -
          envsubst < conferenti-web/CI/dev-deploy/service-dev.yaml | kubectl apply -f -
          envsubst < conferenti-web/CI/dev-deploy/ingress-dev.yaml | kubectl apply -f -
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
      
      - name: Deployment summary
        run: |
          echo "### üéâ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`conferentiregistry.azurecr.io/conferenti/conferenti-web-dev:${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Dev" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # JOB 4: Notify on Failure (Optional)
  # ============================================================================
  notify-failure:
    needs: [unit-tests, e2e-tests, deploy]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Send notification
        run: |
          echo "‚ùå Pipeline failed!"
          echo "One or more jobs failed. Check the workflow run for details."
          # Add Slack/Discord/Email notification here if needed
