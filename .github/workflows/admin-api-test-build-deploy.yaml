name: Conferenti Admin Api - Test and Deploy Pipeline

on:
  pull_request:
    types: [ready_for_review, opened, reopened, synchronize]
    branches: [main]
    paths:
      - "conferenti-admin-api/**"
      - ".github/workflows/admin-api-test-build-deploy.yaml"
  push:
    branches: [main]
    paths:
      - "conferenti-admin-api/**"
      - ".github/workflows/admin-api-test-build-deploy.yaml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./conferenti-admin-api"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: "actions/setup-go@v5"
        with:
          go-version-file: "./conferenti-admin-api/go.mod"

      - name: Download dependencies
        run: "go mod download"

      - name: Tidy dependencies
        run: "go mod tidy"

      - name: Run test target
        run: make test
  build-dev:
    name: Build image for conferenti-admin-api-dev
    needs: [test]
    uses: kkho/workflows/.github/workflows/build-push-backend.yaml@main
    with:
      app_name: conferenti-admin-api
      system_name: conferenti
      environment: development
      dockerfile: ./conferenti-admin-api/Dockerfile
      docker-build-context: ./conferenti-admin-api
      push-image: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
      build-args: |
        LOCAL=${{ vars.LOCAL || false }}
        AUTH0_SCOPE=${{ vars.AUTH0_ADMIN_SCOPE || '' }}
        COSMOSDB_DATABASE="ConferentiDatabase"
        COSMOSDB_SPEAKER_CONTAINER="SpeakerContainer"
        COSMOSDB_SESSION_CONTAINER="SessionContainer"
        COSMOSDB_ENDPOINT=${{ vars.COSMOSDB_ENDPOINT || 'https://localhost:8081/' }}
      tags: |
        ${{ vars.CONTAINER_REGISTRY }}/${{ github.actor }}/conferenti/conferenti-api-development:${{ github.run_number }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      AUTH0_SECRET: ${{ secrets.AUTH0_ADMIN_SECRET }}
      AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_ADMIN_CLIENT_SECRET }}
      AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
      AUTH0_CLIENT_ID: ${{ secrets.AUTH0_ADMIN_CLIENT_ID }}
      AUTH0_AUDIENCE: ${{ secrets.AUTH0_ADMIN_AUDIENCE }}

  notify-failed-tests:
    needs: [test]
    if: ${{ always() }}
    uses: kkho/workflows/.github/workflows/slack-message.yaml@main
    with:
      channel: "#build-dev"
      message: |
        Test results: ${{ needs.test.result }} for Conferenti Api Tests (Development)
        Status: ${{ needs.test.result == 'success' && '✅ Success' || '❌ Failed' }}
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        Url: [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      color: ${{ needs.test.result == 'success' && 'good' || 'danger' }}
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
